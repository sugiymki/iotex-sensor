#!/usr/bin/env ruby
# coding: utf-8
#
# 表題: センサーからデータを取得してファイルに保存するためのスクリプト
#
# 履歴: 2017-01-11 杉山耕一朗
#       2017-03-01 杉山耕一朗
#       2017-11-17 杉山耕一朗
#       2017-11-18 杉山耕一朗
#       2017-12-03 杉山耕一朗
#       2017-12-15 杉山耕一朗
#       2018-11-20 杉山耕一朗
#

require 'open3'
require 'fileutils'
require "matrix"

##################################################
# 環境設定
##################################################

# サーバ名. 
#server = "localhost"
server = "sky.epi.it.matsue-ct.jp"

# サーバ上のデータ受け取り用 PHP スクリプト
#php = "http://#{server}/monitoring.php"
php = "http://#{server}/~sugiyama/php/iotex2018.php"

# データに付ける ID
id  = "IoTeX2018"

##################################################
# 変数の初期化
##################################################

# hostname
o, e, s = Open3.capture3("hostname")
host = o.chomp

# パス.
# sht は pip install sht で /usr/local/bin 以下にインストールされる.
# bmp180, tmp007, tsl2561 は本 git リポジトリで提供.
path = "./iotex-sensor/bin"
bin_list = {
  "sht75"   => "/usr/local/bin/sht  -trd 24 23",
  "sht75-2" => "/usr/local/bin/sht  -trd 27 22",
  "sht75-3" => "/usr/local/bin/sht  -trd 18 17",
  "bmp180"=> "#{path}/bmp180 -p -t",
  "tmp007"=> "#{path}/tmp007 --obj --die",
  "tsl2561"=> "#{path}/tsl2561 -l"
}
# データベースのカラム名
db_list = {
  "sht75"  => ["temp",  "humi",  "dp"],
  "sht75-2"=> ["temp2", "humi2", "dp2"],
  "sht75-3"=> ["temp3", "humi3", "dp3"], 
  "bmp180" => ["pres", "bmptemp"], 
  "tmp007" => ["objtemp", "dietemp"], 
  "tsl2561"=> ["lux"]
}
# データ保管
data_10sec = {
  "sht75"  => Array.new, 
  "sht75-2"=> Array.new, 
  "sht75-3"=> Array.new, 
  "bmp180" => Array.new, 
  "tmp007" => Array.new, 
  "tsl2561"=> Array.new, 
}

# ディレクトリの用意. 定常
dir_now = "data_now/#{host}"
FileUtils.mkdir_p( dir_now ) unless FileTest.exist?( dir_now )
dir_chk = dir_now
FileUtils.mkdir_p( dir_chk ) unless FileTest.exist?( dir_chk )
file_chk1 = "#{dir_chk}/retry.txt"
file_chk2 = "#{dir_chk}/retry.tmp.txt"
file_chk3 = "#{dir_chk}/retry.all.txt" 

# 保管用配列
var_list = Array.new
# SHT75 が存在するか確認
["sht75", "sht75-2", "sht75-3"].each{|sens|
  o, e, s = Open3.capture3(bin_list[sens])
  num = o.split("\n")
  unless num[0] == nil
    var_list.push( sens )
  end
}
# bmp180 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 77 \"")
unless o ==""
  var_list.push( "bmp180" )
end
# tmp007 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 40 \"")
unless o ==""
  var_list.push( "tmp007" )
end
# tsl2561 が存在するか確認
o, e, s = Open3.capture3("/usr/sbin/i2cdetect -y 1 | grep \" 39 \"")
unless o ==""
  var_list.push( "tsl2561" )
end


##################################################
# データ取り・転送
##################################################

# 時刻合わせ. NTP で時間が調整が終わるまで待つ. 
o = "no"
while (o =~ /no$/) do
  o, e, s = Open3.capture3("timedatectl status| grep NTP")
  sleep 10
end

# データ取り. 無限ループ
date0 = Time.now
while true do

  # 時間調整
  sleep 1 

  # 現在時刻取得
  date = Time.now

  # 10 秒毎にデータ取得
  if date.sec % 10 == 0
#    p date
    
    # 各センサーでループを回す
    var_list.each{|var|
      
      # コマンドの実行
      o, e, s = Open3.capture3("#{bin_list[var]}")
#      p o
      
      # 結果の保管
      if e==""
        # 改行区切りで値を分割して配列化
        output_list = o.split("\n")      

        # 配列に保管
        data_10sec[var].push ( output_list )
      end
    }
  end

  # 1 分間隔で平均 => データ保管 & 転送
  if date.sec == 0  
    p date
    
    # 無線 LAN アクセスポイントの ESSID を取得
    o, e, s = Open3.capture3("iwconfig wlan0|grep ESSID")
    /ESSID:\"(.+)\"/ =~ o
    if $1
      essid = $1
    else
      essid = "Wired"
    end
    
    # url の準備
    url = "#{php}?hostname=#{host}\&time=#{date.strftime("%Y/%m/%dT%H:%M:%S")}\&experiment_id=#{id}\&essid=#{essid}"

    # 各センサーに対してループを回す
    var_list.each{|var|    

      # 出力リスト
      output_list = Array.new
      
      for i in 0 .. (db_list[var].size - 1) do
        
        # 平均値の作成
        subarray = Matrix[*data_10sec[var]].t.row(i)
        num = subarray.size
        mean = 0.0
        subarray.each{|x|
          mean += x.to_f / num
        }        
        output_list.push( mean )
        p subarray
        p mean
        
        # 保存
        url = "#{url}\&#{db_list[var][i]}=#{sprintf("%.2f",mean)}"
      end

      # 初期化
      data_10sec[var] = Array.new      
    }

    # サーバへ情報を送る.
    o, e, s = Open3.capture3("curl -m 2 -X GET \"#{url}\"") # タイムアウト 2 秒
    p url
    p o, e, s

    # curl コマンドがタイムアウトするか否かでネットワークの接続性を判断
    if (/exit 0$/ =~ s.to_s || /^ERROR/ =~ o ) 

      # 送信漏れがあれば (該当ファイルがあれば) 再度送信.
      # 一度に全部送ると時間がかかるので, 10 行分に限定. 
      if FileTest.exist?( file_chk1 ) 
        i = 0
        efile = open(file_chk1, "r") 
        rfile = open(file_chk2, "w")  # 一時ファイル
        while line = efile.gets
          if (i < 10)
            o, e, s = Open3.capture3( line )
          else
            rfile.puts( line )  # 11 行目以降は一時ファイルに保管.
          end
          i=i+1
        end
        efile.close
        rfile.close
        FileUtils.mv(file_chk2, file_chk1) # 11 行目以降をファイルに残す
      end

    else
      # 実行コマンドを保管
      rfile = open(file_chk1, "a")
      rfile.puts("curl -X GET \"#{url}\"") 
      rfile.close

      # 実行コマンドを保管 (チェック用)
      afile = open(file_chk3, "a") 
      afile.puts("curl -X GET \"#{url}\"")  
      afile.close

    end
  end
end

exit
